pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
# inner join race dataframes with the top public transport use and income dataframe
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community")
View(max_transit_income)
View(pop_asian)
pop_asian <- pop_asian %>%
clean_names()
pop_white <- pop_white %>%
clean_names()
pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community")
# clean the names of all race dataframes so they join easily
pop_asian <- pop_asian %>%
clean_names()
pop_white <- pop_white %>%
clean_names()
pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
# inner join race dataframes with the top public transport use and income dataframe
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "high_public_transport"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "asian_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y"] <- "black_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# inner join race dataframes with the minimum public transport use and income dataframe
min_transit_race <- min_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "low_public_transport"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "asian_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y"] <- "black_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# Output dataframes
max_transit_race
min_transit_race
View(max_transit_race)
# clean the names of all race dataframes so they join easily
pop_asian <- pop_asian %>%
clean_names()
pop_white <- pop_white %>%
clean_names()
pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
# inner join race dataframes with the top public transport use and income dataframe
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "asian_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y"] <- "black_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# inner join race dataframes with the minimum public transport use and income dataframe
min_transit_race <- min_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "asian_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y"] <- "black_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# Output dataframes
max_transit_race
min_transit_race
View(max_transit_race)
View(min_transit_race)
View(min_transit_income)
# 5 Baltimore neighborhoods that use public transportation the most to get to work
max_public_transportation <- public_transportation %>%
clean_names() %>%
rename(public_transport = x2020_data) %>%
slice_max(public_transport, n=5)
# 5 Baltimore neighborhoods that use public transportation the least to get to work
min_public_transportation <- public_transportation %>%
clean_names() %>%
rename(public_transport = x2020_data) %>%
slice_min(public_transport, n=5)
# Output dataframes
max_public_transportation
min_public_transportation
# inner join neighborhoods that use public transportation the most with income data
median_income <- median_income %>%
clean_names()
max_transit_income <- max_public_transportation %>%
clean_names() %>%
inner_join(median_income, by="community") %>%
rename(median_income = x2020_data)
# inner join neighborhoods that use public transportation the least with income data
min_transit_income <- min_public_transportation %>%
clean_names() %>%
inner_join(median_income, by="community") %>%
rename(median_income = x2020_data)
# output dataframes
max_transit_income
min_transit_income
View(min_transit_income)
# clean the names of all race dataframes so they join easily
pop_asian <- pop_asian %>%
clean_names()
pop_white <- pop_white %>%
clean_names()
pop_black <- pop_black %>%
clean_names()
pop_hisp <- pop_hisp %>%
clean_names()
# inner join race dataframes with the top public transport use and income dataframe
max_transit_race <- max_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(max_transit_race)[names(max_transit_race) == "x2020_data.x"] <- "asian_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y"] <- "black_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(max_transit_race)[names(max_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# inner join race dataframes with the minimum public transport use and income dataframe
min_transit_race <- min_transit_income %>%
clean_names() %>%
inner_join(pop_asian, by="community") %>%
inner_join(pop_black, by="community") %>%
inner_join(pop_white, by="community") %>%
inner_join(pop_hisp, by="community")
names(min_transit_race)[names(min_transit_race) == "x2020_data.x"] <- "asian_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y"] <- "black_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.x.x"] <- "white_pop"
names(min_transit_race)[names(min_transit_race) == "x2020_data.y.y"] <- "hisp_pop"
# Output dataframes
max_transit_race
min_transit_race
View(min_transit_race)
View(max_transit_race)
View(max_transit_race)
View(min_transit_race)
glimpse(max_transit_race)
no_car <- no_car %>%
clean_names()
high_public_low_drive <- max_public_transportation %>%
clean_names() %>%
inner_join(no_car, by="community")
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.x"] <- "high_public_transport"
names(high_public_low_drive)[names(high_public_low_drive) == "x2020_data.y"] <- "no_car"
high_public_low_drive
no_car <- no_car %>%
clean_names()
high_public_low_drive <- max_public_transportation %>%
clean_names() %>%
inner_join(no_car, by="community") %>%
rename(pct_wo_car = x2020_data)
high_public_low_drive
low_public_high_drive
drive_to_work <- drive_to_work %>%
clean_names()
low_public_high_drive <- min_public_transportation %>%
clean_names() %>%
inner_join(drive_to_work, by="community")
low_public_high_drive
drive_to_work <- drive_to_work %>%
clean_names()
low_public_high_drive <- min_public_transportation %>%
clean_names() %>%
inner_join(drive_to_work, by="community") %>%
rename(pct_wo_car = x2020_data)
low_public_high_drive
no_car <- no_car %>%
clean_names()
high_public_low_drive <- max_public_transportation %>%
clean_names() %>%
inner_join(no_car, by="community") %>%
rename(pct_wo_car = x2020_data)
high_public_low_drive
View(high_public_low_drive)
glimpse(high_public_low_drive)
drive_to_work <- drive_to_work %>%
clean_names()
low_public_high_drive <- min_public_transportation %>%
clean_names() %>%
inner_join(drive_to_work, by="community") %>%
rename(pct_wo_car = x2020_data)
low_public_high_drive
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
library(tidyverse)
library(dplyr)
library(janitor)
library(lubridate)
library(readxl)
library(ggthemes)
library(sf)
library(leaflet)
public_transportation <- read_excel("public_transportation/public_transportation.xlsx")
drive_to_work <- read_excel("public_transportation/drive_to_work.xlsx")
no_car <- read_excel("public_transportation/no_car_access.xlsx")
median_income <- read_excel("public_transportation/median_income.xlsx")
pop_white <- read_excel("public_transportation/population_white.xlsx")
pop_black <- read_excel("population_black/population_black.xlsx")
pop_hisp <- read_excel("population_black/population_hispanic.xlsx")
pop_asian <- read_excel("population_black/population_asian.xlsx")
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
setwd("~/GitHub/reverse_engineer_project/csa_2010_boundaries (1)")
baltimore_shape <- st_read("/Users/parkerleipzig/Desktop/GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
baltimore_shape <- st_read("GitHub/reverse_engineer_project/csa_2010_boundaries (1)/CSA_NSA_Tracts.shp")
baltimore_stops <- st_read("GitHub/reverse_engineer_project/Baltimore_Regions_Public_Transit_(stops)//Baltimore_Regions_Public_Transit_(stops).shp")
View(max_transit_income)
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data)
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names()
View(transportation_income_join)
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
View(transportation_income_join)
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme_excel() +
labs(
title="Internet access and income in Baltimore City neighborhoods",
subtitle = "In 2020 Baltimore City neighborhoods with higher median incomes generally
had more home with internet subscriptions than neighborhoods with
low median incomes. Each point represents a neighborhood in Baltimore City,",
x = "Median income",
y = "Percent of homes without internet subscriptions",
caption = "Source: The U.S. Census Bureau  By: Victoria Stavish")
ggplot(transportation_income_join, aes(x=public_transport, y=median_income)) +
geom_point() +
theme_excel() +
labs(
title="Internet access and income in Baltimore City neighborhoods",
subtitle = "In 2020 Baltimore City neighborhoods with higher median incomes generally
had more home with internet subscriptions than neighborhoods with
low median incomes. Each point represents a neighborhood in Baltimore City,",
x = "Median income",
y = "Percent of homes without internet subscriptions",
caption = "Source: The U.S. Census Bureau  By: Victoria Stavish")
# inner join neighborhoods that use public transportation the most with income data
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
# scatterplots for the two graphs
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme_excel() +
labs(
title="Internet access and income in Baltimore City neighborhoods",
subtitle = "In 2020 Baltimore City neighborhoods with higher median incomes generally
had more home with internet subscriptions than neighborhoods with
low median incomes. Each point represents a neighborhood in Baltimore City,",
x = "Median income",
y = "Percent of homes without internet subscriptions",
caption = "Source: The U.S. Census Bureau  By: Victoria Stavish")
# inner join neighborhoods that use public transportation the most with income data
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
# scatterplots for the two graphs
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
labs(
title="Internet access and income in Baltimore City neighborhoods",
subtitle = "In 2020 Baltimore City neighborhoods with higher median incomes generally
had more home with internet subscriptions than neighborhoods with
low median incomes. Each point represents a neighborhood in Baltimore City,",
x = "Median income",
y = "Percent of homes without internet subscriptions",
caption = "Source: The U.S. Census Bureau  By: Victoria Stavish")
# inner join neighborhoods that use public transportation the most with income data
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
# scatterplots for the two graphs
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
labs(
title="As public transportation use declines, salaries increase",
subtitle = "In Baltimore City neighborhoods, neighborhoods with high public transportation use make an median income of $40,000 while the median income of neighborhoods with low public transportation use is about $110,000.",
x = "Median income",
y = "Percent who use public transportation to get to work",
caption = "Source: BNIA  By: Victoria Stavish")
# inner join neighborhoods that use public transportation the most with income data
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
# scatterplots for the two graphs
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
labs(
title="As public transportation use declines, salaries increase",
subtitle = "In Baltimore City neighborhoods, neighborhoods with high public transportation use make an median income
of $40,000 while the median income of neighborhoods with low public transportation use
is about $110,000.",
x = "Median income",
y = "Percent who use public transportation to get to work",
caption = "Source: BNIA  By: Victoria Stavish")
# inner join neighborhoods that use public transportation the most with income data
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
# scatterplots for the two graphs
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
labs(
title="As public transportation use declines, salaries increase",
subtitle = "In Baltimore City neighborhoods, neighborhoods with high public transportation use make an median
income of $40,000 while the median income of neighborhoods with low public
transportation use is about $110,000.",
x = "Median income",
y = "Percent who use public transportation to get to work",
caption = "Source: BNIA  By: Victoria Stavish")
View(public_transportation)
public_transportation <- public_transportation %>%
arrange(desc("2020 Data"))
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x)
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x) %>%
arrange(desc(median_income))
transportation_income_join <- public_transportation %>%
inner_join(median_income, by="Community") %>%
clean_names() %>%
rename(median_income = x2020_data_y) %>%
rename(public_transport = x2020_data_x) %>%
arrange(desc(public_transport))
ggplot(transportation_income_join, aes(y=public_transport, x=median_income)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
labs(
title="As public transportation use declines, salaries increase",
subtitle = "In Baltimore City neighborhoods, neighborhoods with high public transportation use make an median
income of $40,000 while the median income of neighborhoods with low public
transportation use is about $110,000.",
x = "Median income",
y = "Percent who use public transportation to get to work",
caption = "Source: BNIA  By: Victoria Stavish")
knitr::opts_chunk$set(echo = TRUE)
cafe_data <- read_excel("cafe_sales_2020_2022.xlsx")
setwd("~/GitHub/dbk_datadesk/cafe")
cafe_data <- read_excel("cafe_sales_2020_2022.xlsx")
library(tidyverse)
library(dplyr)
library(janitor)
library(readxl)
library(writexl)
library(ggplot2)
cafe_data <- read_excel("cafe_sales_2020_2022.xlsx")
View(cafe_data)
library(tidyverse)
library(dplyr)
library(janitor)
library(readxl)
library(writexl)
library(ggplot2)
cafe_2020 <- read_excel("cafe_2020.xlsx")
cafe_2021 <- read_excel("cafe_2021.xlsx")
cafe_2022 <- read_excel("cafe_2022.xlsx")
View(cafe_2020)
View(cafe_2021)
View(cafe_2022)
cafe_2020 <- cafe_2020 %>%
clean_names()
View(cafe_2020)
cafe_2020 <- cafe_2020 %>%
clean_names()
cafe_2021 <- cafe_2021 %>%
clean_names()
cafe_2022 <- cafe_2022 %>%
clean_names()
cafe_2020 <- cafe_2020 %>%
clean_names()
cafe_2021 <- cafe_2021 %>%
clean_names()
cafe_2022 <- cafe_2022 %>%
clean_names()
View(cafe_2022)
View(cafe_2020)
View(cafe_2021)
View(cafe_2022)
View(cafe_2020)
View(cafe_2020)
View(cafe_2021)
cafe_2020 <- cafe_2020 %>%
clean_names() %>%
rename(cafes = calendar_year_2020)
cafe_2021 <- cafe_2021 %>%
clean_names() %>%
rename(cafes = calendar_year_2021)
cafe_2022 <- cafe_2022 %>%
clean_names() %>%
rename(cafes = calendar_year_2022)
View(cafe_2022)
cafe_2020 <- cafe_2020 %>%
clean_names() %>%
rename(cafe = calendar_year_2020)
cafe_2020 <- cafe_2020 %>%
clean_names() %>%
rename(cafe = cafes)
cafe_2021 <- cafe_2021 %>%
clean_names() %>%
rename(cafe = cafes)
cafe_2022 <- cafe_2022 %>%
clean_names() %>%
rename(cafe = cafes)
closed_cafes <- cafe_2020 %>%
anti_join(cafe_2020, cafe_2021, by="cafe")
View(closed_cafes)
anti_join(cafe_2020, cafe_2021, by="cafe")
closed_cafes <- anti_join(cafe_2020, cafe_2021, by="cafe") %>%
as.data.frame()
View(closed_cafes)
closed_cafes_2021 <- anti_join(cafe_2020, cafe_2021, by="cafe") %>%
as.data.frame()
closed_cafes_2022 <- anti_join(cafe_2021, cafe_2022, by="cafe") %>%
as.data.frame()
View(closed_cafes_2022)
View(closed_cafes_2021)
View(closed_cafes_2021)
View(cafe_2020)
View(cafe_2020)
cafes_2020_bar <-  ggplot(data=df, aes(x=cafe, y=jan_2020:dec_2020)) +
geom_bar(stat="identity")
View(cafe_2020)
library(tidyverse)
library(dplyr)
library(janitor)
library(readxl)
library(writexl)
library(ggplot2)
cafe_2020 <- read_excel("cafe_2020.xlsx")
cafe_2021 <- read_excel("cafe_2021.xlsx")
cafe_2022 <- read_excel("cafe_2022.xlsx")
cafe_2020 <- cafe_2020 %>%
clean_names() %>%
rename(cafe = cafes)
cafe_2020 <- cafe_2020 %>%
clean_names() %>%
rename(cafe = "Calendar Year 2020")
cafe_2020 <- cafe_2020 %>%
clean_names() %>%
rename(cafe = "calendar_year_2020")
cafe_2021 <- cafe_2021 %>%
clean_names() %>%
rename(cafe = "calendar_year_2021")
cafe_2022 <- cafe_2022 %>%
clean_names() %>%
rename(cafe = "calendar_year_2022")
View(cafe_2022)
closed_cafes_2021 <- anti_join(cafe_2020, cafe_2021, by="cafe") %>%
as.data.frame()
closed_cafes_2022 <- anti_join(cafe_2021, cafe_2022, by="cafe") %>%
as.data.frame()
cafes_2020_bar <-  ggplot(data=df, aes(x=cafe, y=jan_2020:dec_2020)) +
geom_bar(stat="identity")
View(cafe_2020)
cafe_2020_bar <- cafe_2020 %>%
pivot_longer((cols=c('cafe', 'jan_2020', 'feb_2020', 'mar_2020', 'apr_2020', 'may_2020', 'jun_2020', 'jul_2020', 'aug_2020', 'sep_2020', 'oct_2020', 'nov_2020', 'dec_2020',
names_to='jan_2020',
values_to='feb_2020')))
