"l_public_statements",
"arbitration",
"l_arbitration",
"arbitration_details",
"l_arbitration_details",
"criminally_charged",
"l_criminally_charged",
"charge_type",
"l_charge_type",
"charges",
"l_charges",
"criminal_charges_outcome",
"l_criminal_charges_outcome",
"criminal_case_details",
"civil suit",
"civil_suit_outcome",
"civil_case_details"))  %>%
mutate(incident_desc = gsub(',', ', ', incident_desc),
incident_desc = gsub('"', '', incident_desc),
findings_detail = gsub(',', ', ', findings_detail),
findings_detail = gsub('"', '', findings_detail),
agency = gsub('"', '', agency),
investigating_agency = gsub('"', '', investigating_agency),
factors_alleged_other = gsub('"', '', factors_alleged_other),
findings_disciplinary = gsub('"', '', findings_disciplinary),
factors_sustained_findings_other = gsub('"', '', factors_sustained_findings_other)
) %>%
mutate(factors_sustained_findings = str_remove_all( factors_sustained_findings, "'" ),
factors_sustained_findings = str_remove_all( factors_sustained_findings, "\\[|\\]|\"" ),
factors_alleged = str_remove_all( factors_alleged, "'" ),
factors_alleged = str_remove_all( factors_alleged, "\\[|\\]|\"" ),
discipline_type = str_remove_all( discipline_type, "\\[|\\]|\"" ),
incident_theme = str_remove_all( incident_theme, "\\[|\\]|\""),
charge_type = str_remove_all( charge_type, "\\[|\\]|\"" ),
charges = gsub(',', ', ', charges))
##
# Make social relational table
##
social_relational_table <- step_four %>%
select(officer_name, deceased_name, states, year, reporter_name, social)
social_relational_table <- cSplit(social_relational_table, "social", sep = '],[', drop = FALSE, stripWhite = FALSE) %>%
select(-social) %>%
pivot_longer(starts_with("social_"), names_to = "social_item_number", values_to = "social_item") %>%
mutate(
social_item = gsub('^.{1}', '', social_item),
social_item = gsub('.{1}$', '', social_item),
social_item = gsub('null', "NA", social_item),
social_item = gsub('\\\\n', '  ', social_item),
social_item = gsub('•', ' • ', social_item)
) %>%
separate(social_item, sep = ",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", into = c("platform", "l_platform", "username", "l_username", "notable_content", "l_notable_content")) %>%
mutate(
platform = str_replace_all(platform, "[^[:alnum:]]", " ")
)
#Create functions ----
ps = prop_section(type = "nextPage")
#function that creates a new word document
new.word.doc = function() {
my.doc = officer::read_docx()
return(my.doc)
}
file_name <- paste0("officer-doc-", today(tzone = "US/Eastern"), "-", hour(now(tzone = "US/Eastern")), "-", minute(now(tzone = "US/Eastern")), "-", round(second(now(tzone = "US/Eastern"))))
#function that creates a heading for our sentences
add.title=function(officer_doc, my.title){
my.prop=fp_text(bold = TRUE, font.size = 12)
the.title=fpar(ftext(my.title, prop=my.prop))
body_add_fpar(officer_doc, the.title)
}
#function that creates text for our sentences
add.text=function(officer_doc, my.text){
my.propp=fp_text(bold = FALSE, font.size = 12, font.family = "Cambria")
the.text=fpar(ftext(my.text, prop=my.propp))
body_add_fpar(officer_doc, the.text)
}
#Create full officer doc ----
officer_doc = new.word.doc()
officer_doc = new.word.doc()
# count number of rows and loop through each element and add to word doc
#devon's beginning attempt at a function, mostly pseudocode
#for each row in master table, slice row, populate doc with all single variables, join, one row master table to the relational table which will filter for just that officer, count number of rows and loop through each element and add to word doc
#create a list of unique reporters to loop through to create docs
unique_reporters <- unique(step_four$reporter_name)
for (name in unique_reporters) {
#create a data frame that only contains cases for one reporter
step_four_filtered <- step_four %>%
filter(reporter_name == name)
#create doc path
letter_docx_path <- paste0(file_name, name, ".docx")
#slice row in filtered df
for (row in 1:nrow(step_four_filtered)) {
step_four_filtered_one_row <- step_four_filtered %>%
slice(row)
#add single variables to doc
body_add_fpar(officer_doc, fpar("Reporter: ", step_four$reporter_name))
body_add_fpar(officer_doc, fpar("Editor Review: ", step_four$editor_review))
body_add_fpar(officer_doc, fpar("Fact checked? ", step_four$fact_check))
add.text(officer_doc, "Fact checker(s): ")
add.text(officer_doc, "")
body_add_fpar(officer_doc, fpar(step_four$officer_name), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$deceased_name), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$states), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$year), style = "Normal")
body_add_par(officer_doc, "")
body_add_fpar(officer_doc, fpar("Officer Role: ", step_four$o_role))
body_add_fpar(officer_doc, fpar(step_four$officer_standout), style = "Normal")
body_add_fpar(officer_doc, fpar("Officer involved in additional death incident(s)?: ", step_four$additional_death), style = "Normal")
body_add_fpar(officer_doc, fpar("Additional death(s) in brief: ", step_four$additional_death_brief), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$deceased_dod), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$ap_standout), style = "Normal")
body_add_par(officer_doc, "")
add.title(officer_doc, "Officer Demographics")
body_add_fpar(officer_doc, fpar(step_four$name_variations), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$gender), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$race), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$ethnicity), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$birth_date), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$education), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$incident_agency), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$officer_experience), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$rank), style = "Normal")
body_add_par(officer_doc, "")
add.title(officer_doc, "Training")
body_add_fpar(officer_doc, fpar(step_four$training), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$training_deficits), style = "Normal")
body_add_par(officer_doc, "")
add.title(officer_doc, "Incidents")
#join one row master table to incidents relational table
filtered_incidents <- incident_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add incident info to doc
for (i in 1:nrow(filtered_incidents)) {
body_add_fpar(officer_doc, fpar("Year: ", filtered_incidents$year))
body_add_fpar(officer_doc, fpar("Month: ", filtered_incidents$month))
body_add_fpar(officer_doc, fpar("Day: ", filtered_incidents$day))
body_add_fpar(officer_doc, fpar("Agency: ", filtered_incidents$agency))
body_add_fpar(officer_doc, fpar("Primary Death Incident?: ", filtered_incidents$primary_death))
body_add_fpar(officer_doc, fpar("Incident Themes: ", filtered_incidents$incident_theme))
body_add_fpar(officer_doc, fpar("Description of incident: ", filtered_incidents$incident_desc))
body_add_fpar(officer_doc, fpar("Investigating agency: ", filtered_incidents$investigating_agency))
body_add_fpar(officer_doc, fpar("Reason for investigation: ", filtered_incidents$investigation_reason))
body_add_fpar(officer_doc, fpar("Factors in Allegations: ", filtered_incidents$factors_alleged))
body_add_fpar(officer_doc, fpar("Other allegation factors: ", filtered_incidents$factors_alleged_other))
body_add_fpar(officer_doc, fpar("Findings of Disciplinary Process: ", filtered_incidents$findings_disciplinary))
body_add_fpar(officer_doc, fpar("Did the officer dispute the allegations or findings?: ", filtered_incidents$disputed))
body_add_fpar(officer_doc, fpar("Findings detail: ", filtered_incidents$findings_detail))
body_add_fpar(officer_doc, fpar("Factors in Sustained Findings: ", filtered_incidents$factors_sustained_findings))
body_add_fpar(officer_doc, fpar("Other sustained findings factors: ", filtered_incidents$factors_sustained_findings_other))
body_add_fpar(officer_doc, fpar("Discipline Type: ", filtered_incidents$discipline_type))
body_add_fpar(officer_doc, fpar("Discipline/Outcome Details: ", filtered_incidents$discipline_details))
body_add_fpar(officer_doc, fpar("Did the officer have union representation, legal representation, or outside counsel? If yes, note organization, name(s) and contact information as available: ", filtered_incidents$representation))
body_add_fpar(officer_doc, fpar("Agency Public Statement(s) about incident: ", filtered_incidents$public_statements))
body_add_fpar(officer_doc, fpar("Did the incident go to arbitration?: ", filtered_incidents$arbitration))
body_add_fpar(officer_doc, fpar("Arbitration Details: ", filtered_incidents$arbitration_details))
body_add_fpar(officer_doc, fpar("Criminally Charged?: ", filtered_incidents$criminally_charged))
body_add_fpar(officer_doc, fpar("Charge Type: ", filtered_incidents$charge_type))
body_add_fpar(officer_doc, fpar("Charges: ", filtered_incidents$charges))
body_add_fpar(officer_doc, fpar("Outcome of criminal charges: ", filtered_incidents$criminal_charges_outcome))
body_add_fpar(officer_doc, fpar("Criminal case detail: ", filtered_incidents$criminal_case_details))
body_add_fpar(officer_doc, fpar("Civil suit?: ", filtered_incidents$civil_suit))
body_add_fpar(officer_doc, fpar("Outcome of civil suit: ", filtered_incidents$civil_suit_outcome))
body_add_fpar(officer_doc, fpar("Civil case detail: ", filtered_incidents$civil_case_details))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Employment")
#join one row master table to employment relational table
filtered_employment <- employment_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add employment info to doc
for (i in 1:nrow(filtered_employment)) {
body_add_fpar(officer_doc, fpar("Start Year: ", filtered_employment$s_year))
body_add_fpar(officer_doc, fpar("Start Month: ", filtered_employment$s_month))
body_add_fpar(officer_doc, fpar("Start Day: ", filtered_employment$s_day))
body_add_fpar(officer_doc, fpar("End Year: ", filtered_employment$e_year))
body_add_fpar(officer_doc, fpar("End Month: ", filtered_employment$e_month))
body_add_fpar(officer_doc, fpar("End Day: ", filtered_employment$e_day))
body_add_fpar(officer_doc, fpar("Law enforcement or security?: ", filtered_employment$law_enforcement_or_security))
body_add_fpar(officer_doc, fpar("Law enforcement or security type: ", filtered_employment$employer_type))
body_add_fpar(officer_doc, fpar("Agency or Employer Name: ", filtered_employment$agency_name))
body_add_fpar(officer_doc, fpar("Agency or Employer State: ", filtered_employment$agency_state))
body_add_fpar(officer_doc, fpar("Job Title and/or Role: ", filtered_employment$role))
body_add_fpar(officer_doc, fpar("Commendations: ", filtered_employment$commendations))
body_add_fpar(officer_doc, fpar("If law enforcement, PIA documents requested?: ", filtered_employment$PIA_requested))
body_add_fpar(officer_doc, fpar("Employment Notes: ", filtered_employment$employment_notes))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Additional Information")
add.title(officer_doc, "News")
#join one row master table to news relational table
filtered_news <- news_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add news info to doc
for (i in 1:nrow(filtered_news)) {
body_add_fpar(officer_doc, fpar("Reason officer in the news: ", filtered_news$nreason))
body_add_fpar(officer_doc, fpar("Year of newsworthy incident: ", filtered_news$nyear))
body_add_fpar(officer_doc, fpar("Extent of coverage: ", filtered_news$coverage_extent))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Social Media, Forums and Online Communities")
#join one row master table to social relational table
filtered_social <- social_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add news info to doc
for (i in 1:nrow(filtered_social)) {
body_add_fpar(officer_doc, fpar("Platform: ", filtered_social$platform))
body_add_fpar(officer_doc, fpar("Username: ", filtered_social$username))
body_add_fpar(officer_doc, fpar("Notable content: ", filtered_social$notable_content))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Other")
body_add_fpar(officer_doc, fpar(step_four_filtered_one_row$other), style = "Normal")
body_add_par(officer_doc, "")
body_add_break(officer_doc, pos = "after")
letter_docx_path <- paste0(file_name, ".docx")
print(officer_doc, target = letter_docx_path)
}
letter_docx_path %>%
drive_upload(path = "https://drive.google.com/drive/u/2/folders/1PDMqwC3_HN7-w9Y_E1BRuY0ED7echLcw/", overwrite = FALSE, type = "document")
}
unique_reporters <- unique(step_four$reporter_name)
for (name in unique_reporters) {
#create a data frame that only contains cases for one reporter
step_four_filtered <- step_four %>%
filter(reporter_name == name)
#create doc path
letter_docx_path <- paste0(file_name, name, ".docx")
#slice row in filtered df
for (row in 1:nrow(step_four_filtered)) {
step_four_filtered_one_row <- step_four_filtered %>%
slice(row)
#add single variables to doc
body_add_fpar(officer_doc, fpar("Reporter: ", step_four$reporter_name))
body_add_fpar(officer_doc, fpar("Editor Review: ", step_four$editor_review))
body_add_fpar(officer_doc, fpar("Fact checked? ", step_four$fact_check))
add.text(officer_doc, "Fact checker(s): ")
add.text(officer_doc, "")
body_add_fpar(officer_doc, fpar(step_four$officer_name), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$deceased_name), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$states), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$year), style = "Normal")
body_add_par(officer_doc, "")
body_add_fpar(officer_doc, fpar("Officer Role: ", step_four$o_role))
body_add_fpar(officer_doc, fpar(step_four$officer_standout), style = "Normal")
body_add_fpar(officer_doc, fpar("Officer involved in additional death incident(s)?: ", step_four$additional_death), style = "Normal")
body_add_fpar(officer_doc, fpar("Additional death(s) in brief: ", step_four$additional_death_brief), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$deceased_dod), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$ap_standout), style = "Normal")
body_add_par(officer_doc, "")
add.title(officer_doc, "Officer Demographics")
body_add_fpar(officer_doc, fpar(step_four$name_variations), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$gender), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$race), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$ethnicity), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$birth_date), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$education), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$incident_agency), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$officer_experience), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$rank), style = "Normal")
body_add_par(officer_doc, "")
add.title(officer_doc, "Training")
body_add_fpar(officer_doc, fpar(step_four$training), style = "Normal")
body_add_fpar(officer_doc, fpar(step_four$training_deficits), style = "Normal")
body_add_par(officer_doc, "")
add.title(officer_doc, "Incidents")
#join one row master table to incidents relational table
filtered_incidents <- incident_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add incident info to doc
for (i in 1:nrow(filtered_incidents)) {
body_add_fpar(officer_doc, fpar("Year: ", filtered_incidents$year))
body_add_fpar(officer_doc, fpar("Month: ", filtered_incidents$month))
body_add_fpar(officer_doc, fpar("Day: ", filtered_incidents$day))
body_add_fpar(officer_doc, fpar("Agency: ", filtered_incidents$agency))
body_add_fpar(officer_doc, fpar("Primary Death Incident?: ", filtered_incidents$primary_death))
body_add_fpar(officer_doc, fpar("Incident Themes: ", filtered_incidents$incident_theme))
body_add_fpar(officer_doc, fpar("Description of incident: ", filtered_incidents$incident_desc))
body_add_fpar(officer_doc, fpar("Investigating agency: ", filtered_incidents$investigating_agency))
body_add_fpar(officer_doc, fpar("Reason for investigation: ", filtered_incidents$investigation_reason))
body_add_fpar(officer_doc, fpar("Factors in Allegations: ", filtered_incidents$factors_alleged))
body_add_fpar(officer_doc, fpar("Other allegation factors: ", filtered_incidents$factors_alleged_other))
body_add_fpar(officer_doc, fpar("Findings of Disciplinary Process: ", filtered_incidents$findings_disciplinary))
body_add_fpar(officer_doc, fpar("Did the officer dispute the allegations or findings?: ", filtered_incidents$disputed))
body_add_fpar(officer_doc, fpar("Findings detail: ", filtered_incidents$findings_detail))
body_add_fpar(officer_doc, fpar("Factors in Sustained Findings: ", filtered_incidents$factors_sustained_findings))
body_add_fpar(officer_doc, fpar("Other sustained findings factors: ", filtered_incidents$factors_sustained_findings_other))
body_add_fpar(officer_doc, fpar("Discipline Type: ", filtered_incidents$discipline_type))
body_add_fpar(officer_doc, fpar("Discipline/Outcome Details: ", filtered_incidents$discipline_details))
body_add_fpar(officer_doc, fpar("Did the officer have union representation, legal representation, or outside counsel? If yes, note organization, name(s) and contact information as available: ", filtered_incidents$representation))
body_add_fpar(officer_doc, fpar("Agency Public Statement(s) about incident: ", filtered_incidents$public_statements))
body_add_fpar(officer_doc, fpar("Did the incident go to arbitration?: ", filtered_incidents$arbitration))
body_add_fpar(officer_doc, fpar("Arbitration Details: ", filtered_incidents$arbitration_details))
body_add_fpar(officer_doc, fpar("Criminally Charged?: ", filtered_incidents$criminally_charged))
body_add_fpar(officer_doc, fpar("Charge Type: ", filtered_incidents$charge_type))
body_add_fpar(officer_doc, fpar("Charges: ", filtered_incidents$charges))
body_add_fpar(officer_doc, fpar("Outcome of criminal charges: ", filtered_incidents$criminal_charges_outcome))
body_add_fpar(officer_doc, fpar("Criminal case detail: ", filtered_incidents$criminal_case_details))
body_add_fpar(officer_doc, fpar("Civil suit?: ", filtered_incidents$civil_suit))
body_add_fpar(officer_doc, fpar("Outcome of civil suit: ", filtered_incidents$civil_suit_outcome))
body_add_fpar(officer_doc, fpar("Civil case detail: ", filtered_incidents$civil_case_details))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Employment")
#join one row master table to employment relational table
filtered_employment <- employment_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add employment info to doc
for (i in 1:nrow(filtered_employment)) {
body_add_fpar(officer_doc, fpar("Start Year: ", filtered_employment$s_year))
body_add_fpar(officer_doc, fpar("Start Month: ", filtered_employment$s_month))
body_add_fpar(officer_doc, fpar("Start Day: ", filtered_employment$s_day))
body_add_fpar(officer_doc, fpar("End Year: ", filtered_employment$e_year))
body_add_fpar(officer_doc, fpar("End Month: ", filtered_employment$e_month))
body_add_fpar(officer_doc, fpar("End Day: ", filtered_employment$e_day))
body_add_fpar(officer_doc, fpar("Law enforcement or security?: ", filtered_employment$law_enforcement_or_security))
body_add_fpar(officer_doc, fpar("Law enforcement or security type: ", filtered_employment$employer_type))
body_add_fpar(officer_doc, fpar("Agency or Employer Name: ", filtered_employment$agency_name))
body_add_fpar(officer_doc, fpar("Agency or Employer State: ", filtered_employment$agency_state))
body_add_fpar(officer_doc, fpar("Job Title and/or Role: ", filtered_employment$role))
body_add_fpar(officer_doc, fpar("Commendations: ", filtered_employment$commendations))
body_add_fpar(officer_doc, fpar("If law enforcement, PIA documents requested?: ", filtered_employment$PIA_requested))
body_add_fpar(officer_doc, fpar("Employment Notes: ", filtered_employment$employment_notes))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Additional Information")
add.title(officer_doc, "News")
#join one row master table to news relational table
filtered_news <- news_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add news info to doc
for (i in 1:nrow(filtered_news)) {
body_add_fpar(officer_doc, fpar("Reason officer in the news: ", filtered_news$nreason))
body_add_fpar(officer_doc, fpar("Year of newsworthy incident: ", filtered_news$nyear))
body_add_fpar(officer_doc, fpar("Extent of coverage: ", filtered_news$coverage_extent))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Social Media, Forums and Online Communities")
#join one row master table to social relational table
filtered_social <- social_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add news info to doc
for (i in 1:nrow(filtered_social)) {
body_add_fpar(officer_doc, fpar("Platform: ", filtered_social$platform))
body_add_fpar(officer_doc, fpar("Username: ", filtered_social$username))
body_add_fpar(officer_doc, fpar("Notable content: ", filtered_social$notable_content))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Other")
body_add_fpar(officer_doc, fpar(step_four_filtered_one_row$other), style = "Normal")
body_add_par(officer_doc, "")
body_add_break(officer_doc, pos = "after")
letter_docx_path <- paste0(file_name, ".docx")
print(officer_doc, target = letter_docx_path)
}
letter_docx_path %>%
drive_upload(path = "https://drive.google.com/drive/u/2/folders/1PDMqwC3_HN7-w9Y_E1BRuY0ED7echLcw/", overwrite = FALSE, type = "document")
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
list_bigten <- c("INDIANA", "MARYLAND", "MICHIGAN", "MICH STATE", "OHIO STATE", "PENN STATE", "RUTGERS", "ILLINOIS", "IOWA", "MINNESOTA", "NEBRASKA", "NWESTERN", "PURDUE", "WISCONSIN")
blocking <- read_csv("offense_blocking.csv")
list_bigten <- c("INDIANA", "MARYLAND", "MICHIGAN", "MICH STATE", "OHIO STATE", "PENN STATE", "RUTGERS", "ILLINOIS", "IOWA", "MINNESOTA", "NEBRASKA", "NWESTERN", "PURDUE", "WISCONSIN")
blocking <- read_csv("offense_blocking.csv")
View(blocking)
blockingsummary <- blocking %>%
filter(team_name  %in%  list_bigten) %>%
group_by(team_name) %>%
summarize(totalhits = sum(hits_allowed), totalpress = sum(pressures_allowed), totalnospikesnaps = sum(non_spike_pass_block)) %>%
mutate(hitspersnapperc = 100 * totalhits/totalnospikesnaps) %>%
mutate(presspersnapperc = 100 *totalpress/totalnospikesnaps) %>%
arrange(desc(totalhits))
View(blockingsummary)
list_bigten <- c("INDIANA", "MARYLAND", "MICHIGAN", "MICH STATE", "OHIO STATE", "PENN STATE", "RUTGERS", "ILLINOIS", "IOWA", "MINNESOTA", "NEBRASKA", "NWESTERN", "PURDUE", "WISCONSIN")
blocking <- read_csv("offense_blocking.csv")
blockingsummary <- blocking %>%
filter(team_name  %in%  list_bigten) %>%
group_by(team_name) %>%
summarize(totalhits = sum(hits_allowed), totalpress = sum(pressures_allowed), totalnospikesnaps = sum(non_spike_pass_block)) %>%
mutate(hitspersnapperc = 100 * (totalhits/totalnospikesnaps)) %>%
mutate(presspersnapperc = 100 *(totalpress/totalnospikesnaps)) %>%
arrange(desc(totalhits))
setwd("~/Documents/Github/dbk_datadesk/covid")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(dplyr)
library(writexl)
data <- read_csv('data.csv')
colnames(data) <- c('drop','type','role','date','count')
data <-
data%>%
drop_na(drop)
data <- subset(data, select = -c(drop))
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
View(data)
#create dfs by semester
fall2020 <- data[data$date >= "2020-08-30" & data$date <= "2020-12-22", ]
spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-22", ]
spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
fall2022  <- data[data$date >= "2022-08-29",]
#devon semesters - adjust start date for fall 2020, end date for fall 2021
d_fall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-12-22", ]
d_spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
d_fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-21", ]
d_spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
d_fall2022  <- data[data$date >= "2022-08-29",]
View(d_fall2022)
sum(fall2020$count)
sum(spring2021$count)
sum(fall2021$count)
sum(spring2022$count)
sum(fall2022$count)
#devon sums with new adjusted semesters
sum(d_fall2020$count)
sum(d_spring2021$count)
sum(d_fall2021$count)
sum(d_spring2022$count)
sum(d_fall2022$count)
shortfall2020 <- data[data$date >= "2020-08-30" & data$date <= "2020-09-21", ]
shortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-10", ] #why is this shorter? - devon
shortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-09-21", ]
shortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-11", ] #why is this shorter? - devon
fall2022  <- data[data$date >= "2022-08-29",]
#devon short sems adjusting fall 2020 start, spring 2021 end, fall 2021 end, spring 2022 end
d_shortfall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-09-21", ]
d_shortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-15", ]
d_shortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-09-20", ]
d_shortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-14", ]
d_fall2022  <- data[data$date >= "2022-08-29",]
sum(shortfall2020$count)
sum(shortspring2021$count)
sum(shortfall2021$count)
sum(shortspring2022$count)
sum(fall2022$count)
sum(d_shortfall2020$count)
sum(d_shortspring2021$count)
sum(d_shortfall2021$count)
sum(d_shortspring2022$count)
sum(d_fall2022$count)
library(ggplot2)
ggplot(data=data, aes(x=date, y=count, group=1)) +
geom_line()+
geom_point()
databydate <- data %>% group_by(date)
databydate <- subset(databydate, select = -c(role))
shortfall2020sr <-
shortfall2020%>%
filter(type == "Self Reported")
shortspring2021sr <-
shortspring2021%>%
filter(type == "Self Reported")
shortfall2021sr <-
shortfall2021%>%
filter(type == "Self Reported")
shortspring2022sr <-
shortspring2022%>%
filter(type == "Self Reported")
fall2022sr <-
fall2022%>%
filter(type == "Self Reported")
sum(fall2020sr$count)
databydate <- data %>% group_by(date)
databydate <- subset(databydate, select = -c(role))
shortfall2020sr <-
shortfall2020%>%
filter(type == "Self Reported")
shortspring2021sr <-
shortspring2021%>%
filter(type == "Self Reported")
shortfall2021sr <-
shortfall2021%>%
filter(type == "Self Reported")
shortspring2022sr <-
shortspring2022%>%
filter(type == "Self Reported")
fall2022sr <-
fall2022%>%
filter(type == "Self Reported")
sum(fall2020sr$count)
shortfall2020u <-
shortfall2020%>%
filter(type =="UHC Reported")
shortspring2021u <-
shortspring2021%>%
filter(type == "UHC Reported")
shortfall2021u <-
shortfall2021%>%
filter(type == "UHC Reported")
shortspring2022u <-
shortspring2022%>%
filter(type == "UHC Reported")
fall2022u <-
fall2022%>%
filter(type == "UHC Reported")
sum(fall2020u$count)
