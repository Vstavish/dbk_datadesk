filter(!is.na(year))
#add incident info to doc
for (i in 1:nrow(filtered_incidents)) {
body_add_fpar(officer_doc, fpar("Year: ", filtered_incidents$year))
body_add_fpar(officer_doc, fpar("Month: ", filtered_incidents$month))
body_add_fpar(officer_doc, fpar("Day: ", filtered_incidents$day))
body_add_fpar(officer_doc, fpar("Agency: ", filtered_incidents$agency))
body_add_fpar(officer_doc, fpar("Primary Death Incident?: ", filtered_incidents$primary_death))
body_add_fpar(officer_doc, fpar("Incident Themes: ", filtered_incidents$incident_theme))
body_add_fpar(officer_doc, fpar("Description of incident: ", filtered_incidents$incident_desc))
body_add_fpar(officer_doc, fpar("Investigating agency: ", filtered_incidents$investigating_agency))
body_add_fpar(officer_doc, fpar("Reason for investigation: ", filtered_incidents$investigation_reason))
body_add_fpar(officer_doc, fpar("Factors in Allegations: ", filtered_incidents$factors_alleged))
body_add_fpar(officer_doc, fpar("Other allegation factors: ", filtered_incidents$factors_alleged_other))
body_add_fpar(officer_doc, fpar("Findings of Disciplinary Process: ", filtered_incidents$findings_disciplinary))
body_add_fpar(officer_doc, fpar("Did the officer dispute the allegations or findings?: ", filtered_incidents$disputed))
body_add_fpar(officer_doc, fpar("Findings detail: ", filtered_incidents$findings_detail))
body_add_fpar(officer_doc, fpar("Factors in Sustained Findings: ", filtered_incidents$factors_sustained_findings))
body_add_fpar(officer_doc, fpar("Other sustained findings factors: ", filtered_incidents$factors_sustained_findings_other))
body_add_fpar(officer_doc, fpar("Discipline Type: ", filtered_incidents$discipline_type))
body_add_fpar(officer_doc, fpar("Discipline/Outcome Details: ", filtered_incidents$discipline_details))
body_add_fpar(officer_doc, fpar("Did the officer have union representation, legal representation, or outside counsel? If yes, note organization, name(s) and contact information as available: ", filtered_incidents$representation))
body_add_fpar(officer_doc, fpar("Agency Public Statement(s) about incident: ", filtered_incidents$public_statements))
body_add_fpar(officer_doc, fpar("Did the incident go to arbitration?: ", filtered_incidents$arbitration))
body_add_fpar(officer_doc, fpar("Arbitration Details: ", filtered_incidents$arbitration_details))
body_add_fpar(officer_doc, fpar("Criminally Charged?: ", filtered_incidents$criminally_charged))
body_add_fpar(officer_doc, fpar("Charge Type: ", filtered_incidents$charge_type))
body_add_fpar(officer_doc, fpar("Charges: ", filtered_incidents$charges))
body_add_fpar(officer_doc, fpar("Outcome of criminal charges: ", filtered_incidents$criminal_charges_outcome))
body_add_fpar(officer_doc, fpar("Criminal case detail: ", filtered_incidents$criminal_case_details))
body_add_fpar(officer_doc, fpar("Civil suit?: ", filtered_incidents$civil_suit))
body_add_fpar(officer_doc, fpar("Outcome of civil suit: ", filtered_incidents$civil_suit_outcome))
body_add_fpar(officer_doc, fpar("Civil case detail: ", filtered_incidents$civil_case_details))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Employment")
#join one row master table to employment relational table
filtered_employment <- employment_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add employment info to doc
for (i in 1:nrow(filtered_employment)) {
body_add_fpar(officer_doc, fpar("Start Year: ", filtered_employment$s_year))
body_add_fpar(officer_doc, fpar("Start Month: ", filtered_employment$s_month))
body_add_fpar(officer_doc, fpar("Start Day: ", filtered_employment$s_day))
body_add_fpar(officer_doc, fpar("End Year: ", filtered_employment$e_year))
body_add_fpar(officer_doc, fpar("End Month: ", filtered_employment$e_month))
body_add_fpar(officer_doc, fpar("End Day: ", filtered_employment$e_day))
body_add_fpar(officer_doc, fpar("Law enforcement or security?: ", filtered_employment$law_enforcement_or_security))
body_add_fpar(officer_doc, fpar("Law enforcement or security type: ", filtered_employment$employer_type))
body_add_fpar(officer_doc, fpar("Agency or Employer Name: ", filtered_employment$agency_name))
body_add_fpar(officer_doc, fpar("Agency or Employer State: ", filtered_employment$agency_state))
body_add_fpar(officer_doc, fpar("Job Title and/or Role: ", filtered_employment$role))
body_add_fpar(officer_doc, fpar("Commendations: ", filtered_employment$commendations))
body_add_fpar(officer_doc, fpar("If law enforcement, PIA documents requested?: ", filtered_employment$PIA_requested))
body_add_fpar(officer_doc, fpar("Employment Notes: ", filtered_employment$employment_notes))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Additional Information")
add.title(officer_doc, "News")
#join one row master table to news relational table
filtered_news <- news_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add news info to doc
for (i in 1:nrow(filtered_news)) {
body_add_fpar(officer_doc, fpar("Reason officer in the news: ", filtered_news$nreason))
body_add_fpar(officer_doc, fpar("Year of newsworthy incident: ", filtered_news$nyear))
body_add_fpar(officer_doc, fpar("Extent of coverage: ", filtered_news$coverage_extent))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Social Media, Forums and Online Communities")
#join one row master table to social relational table
filtered_social <- social_relational_table %>%
left_join(step_four_filtered_one_row, by=c("officer_name", "deceased_name", "states", "reporter_name")) %>%
filter(!is.na(year))
#add news info to doc
for (i in 1:nrow(filtered_social)) {
body_add_fpar(officer_doc, fpar("Platform: ", filtered_social$platform))
body_add_fpar(officer_doc, fpar("Username: ", filtered_social$username))
body_add_fpar(officer_doc, fpar("Notable content: ", filtered_social$notable_content))
body_add_par(officer_doc, "")
}
body_add_par(officer_doc, "")
add.title(officer_doc, "Other")
body_add_fpar(officer_doc, fpar(step_four_filtered_one_row$other), style = "Normal")
body_add_par(officer_doc, "")
body_add_break(officer_doc, pos = "after")
letter_docx_path <- paste0(file_name, ".docx")
print(officer_doc, target = letter_docx_path)
}
letter_docx_path %>%
drive_upload(path = "https://drive.google.com/drive/u/2/folders/1PDMqwC3_HN7-w9Y_E1BRuY0ED7echLcw/", overwrite = FALSE, type = "document")
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(dplyr)
library(writexl)
library(ggplot2)
data <- read_csv('data930.csv')
colnames(data) <- c('drop','type','role','date','count')
data <-
data%>%
drop_na(drop)
data <- subset(data, select = -c(drop))
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
ggplot(data=data, aes(x=date, y=count, group=1)) +
geom_line()+
geom_point()
setwd("~/Documents/Github/dbk_datadesk/covid")
#create dfs by semester
fall2020 <- data[data$date >= "2020-08-30" & data$date <= "2020-12-22", ]
spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-22", ]
spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
fall2022  <- data[data$date >= "2022-08-29",]
#devon semesters - adjust start date for fall 2020, end date for fall 2021
d_fall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-12-22", ]
d_spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
d_fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-21", ]
d_spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
d_fall2022  <- data[data$date >= "2022-08-29",]
sum(fall2020$count)
sum(spring2021$count)
sum(fall2021$count)
sum(spring2022$count)
sum(fall2022$count)
#devon sums with new adjusted semesters
sum(d_fall2020$count)
sum(d_spring2021$count)
sum(d_fall2021$count)
sum(d_spring2022$count)
sum(d_fall2022$count)
shortfall2020 <- data[data$date >= "2020-08-30" & data$date <= "2020-09-21", ]
shortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-10", ] #why is this shorter? - devon
shortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-09-21", ]
shortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-11", ] #why is this shorter? - devon
fall2022  <- data[data$date >= "2022-08-29",]
#devon short sems adjusting fall 2020 start, spring 2021 end, fall 2021 end, spring 2022 end
d_shortfall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-09-21", ]
d_shortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-15", ]
d_shortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-09-20", ]
d_shortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-14", ]
d_fall2022  <- data[data$date >= "2022-08-29",]
#again, again with new data --> 32 day periods
newshortfall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-10-02", ]
newshortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-26", ]
newshortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-10-01", ]
newshortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-25", ]
newfall2022  <- data[data$date >= "2022-08-29",]
View(data)
sum(newshortfall2020$count)
sum(newshortspring2021$count)
sum(newshortfall2021$count)
sum(newshortspring2022$count)
sum(newfall2022$count)
#devon sums with adjusted semesters
sum(d_shortfall2020$count)
sum(d_shortspring2021$count)
sum(d_shortfall2021$count)
sum(d_shortspring2022$count)
sum(d_fall2022$count)
#rina sums with new time periods
sum(newshortfall2020$count)
sum(newshortspring2021$count)
sum(newshortfall2021$count)
sum(newshortspring2022$count)
sum(newfall2022$count)
#devon sums with 30-day periods
sum(d_newshortfall2020$count)
#again, again with new data --> 32 day periods
newshortfall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-10-02", ]
newshortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-26", ]
newshortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-10-01", ]
newshortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-25", ]
newfall2022  <- data[data$date >= "2022-08-29",]
#devon 30 day periods
d_newshortfall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-09-30", ]
d_newshortspring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-02-24", ]
d_newshortfall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-09-29", ]
d_newshortspring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-02-23", ]
d_newthirtyfall2022 <- data[data$date >= "2022-08-29" & data$date <= "2022-09-28",]
d_newfall2022  <- data[data$date >= "2022-08-29",]
sum(newshortfall2020$count)
sum(newshortspring2021$count)
sum(newshortfall2021$count)
sum(newshortspring2022$count)
sum(newfall2022$count)
#devon sums with adjusted semesters
sum(d_shortfall2020$count)
sum(d_shortspring2021$count)
sum(d_shortfall2021$count)
sum(d_shortspring2022$count)
sum(d_fall2022$count)
#rina sums with new time periods
sum(newshortfall2020$count)
sum(newshortspring2021$count)
sum(newshortfall2021$count)
sum(newshortspring2022$count)
sum(newfall2022$count)
#devon sums with 30-day periods
sum(d_newshortfall2020$count)
sum(d_newshortspring2021$count)
sum(d_newshortfall2021$count)
sum(s_newshortspring2022$count)
sum(newshortfall2020$count)
sum(newshortspring2021$count)
sum(newshortfall2021$count)
sum(newshortspring2022$count)
sum(newfall2022$count)
#devon sums with adjusted semesters
sum(d_shortfall2020$count)
sum(d_shortspring2021$count)
sum(d_shortfall2021$count)
sum(d_shortspring2022$count)
sum(d_fall2022$count)
#rina sums with new time periods
sum(newshortfall2020$count)
sum(newshortspring2021$count)
sum(newshortfall2021$count)
sum(newshortspring2022$count)
sum(newfall2022$count)
#devon sums with 30-day periods
sum(d_newshortfall2020$count)
sum(d_newshortspring2021$count)
sum(d_newshortfall2021$count)
sum(d_newshortspring2022$count)
sum(d_newthirtyfall2022$count)
sum(d_newfall2022$count)
databydate <- data %>% group_by(date)
databydate <- subset(databydate, select = -c(role))
newshortfall2020sr <-
newshortfall2020%>%
filter(type == "Self Reported")
newshortspring2021sr <-
newshortspring2021%>%
filter(type == "Self Reported")
newshortfall2021sr <-
newshortfall2021%>%
filter(type == "Self Reported")
newshortspring2022sr <-
newshortspring2022%>%
filter(type == "Self Reported")
newfall2022sr <-
newfall2022%>%
filter(type == "Self Reported")
sum(newshortfall2020sr$count)
sum(newshortspring2021sr$count)
sum(newshortfall2021sr$count)
sum(newshortspring2022sr$count)
sum(newfall2022sr$count)
sum(fall2020sr$count)
#load in data
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
library(tidyverse)
library(lubridate)
library(dplyr)
library(writexl)
library(ggplot2)
library(janitor)
#load in data
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
# mutate(
#   number_of_cases = as.double(number_of_cases)
# )
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
)
View(data)
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
# mutate(
#   number_of_cases = as.double(number_of_cases)
# )
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
)
library(tidyverse)
library(lubridate)
library(dplyr)
library(writexl)
library(ggplot2)
library(janitor)
library(tidyr)
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
# mutate(
#   number_of_cases = as.double(number_of_cases)
# )
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
)
library(tidyverse)
library(lubridate)
library(dplyr)
library(writexl)
library(ggplot2)
library(janitor)
library(readxl)
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
# mutate(
#   number_of_cases = as.double(number_of_cases)
# )
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
data <- read_csv('data.csv') %>%
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
# mutate(
#   number_of_cases = as.double(number_of_cases)
# )
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
)
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names()
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0)
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = list, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
)
new_data <- read_xlsx("data_09_30.xlsx") %>%
clean_names() %>%
rename(
date = positive_test_result_date
)
### policy dates
historic_dates <- read_csv("historical_covid_dates.csv") %>%
select(dates, what_happened) %>%
rename(
date = dates
)
##pivoted data
join_dates_and_cases <- new_data %>%
left_join(historic_dates, by=c("date")) %>%
pivot_wider(names_from=primary_role, values_from=no_of_cases) %>%
clean_names()
##wider for fun
wide_join_dates_and_cases <- new_data %>%
left_join(historic_dates, by=c("date")) %>%
select(-diamondback_request) %>%
group_by(reporting_type) %>%
pivot_wider(names_from=c("primary_role", "reporting_type"), values_from=no_of_cases) %>%
clean_names() %>%
mutate_at(c(3:8), ~replace_na(.,0))
View(wide_join_dates_and_cases)
View(newfall2022)
View(new_data)
View(historic_dates)
#load in data
data <- read_csv('data.csv') %>%
clean_names() %>%
rename(
date = positive_test_result_date
) %>%
drop_na(question_from_laura) #%>%
# mutate(
#   number_of_cases = as.double(number_of_cases)
# )
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
clean_historic_data <- data %>%
pivot_wider(names_from=primary_role, values_from=number_of_cases, values_fn = length, values_fill = 0) %>%
clean_names() %>%
mutate(
student = as.character(student)
)
#mutate(across(student:faculty, ~replace(., lengths(.) == 0, NA)))
#export to excel because efficiency and I don't know how
write_xlsx(clean_historic_data, "clean_historic_data.xlsx")
self_reports_clean <- clean_historic_data %>%
filter(self_reported_or_uhc_reported == "Self Reported")
# test
fall2020 <- clean_historic_data[clean_historic_data$date >= "2020-08-30" & clean_historic_data$date <= "2020-12-22", ]
self_reports_clean[is.null(self_reports_clean)] = 0
uhc_reports_clean <- clean_historic_data %>%
filter(self_reported_or_uhc_reported == "UHC Reported")
View(clean_historic_data)
#create dfs by semester
fall2020 <- data[data$date >= "2020-08-30" & data$date <= "2020-12-22", ]
spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-22", ]
spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
fall2022  <- data[data$date >= "2022-08-29",]
#devon semesters - adjust start date for fall 2020, end date for fall 2021 -- USE THIS FOR TOTAL SEM COUNT
d_fall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-12-22", ]
d_spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
d_fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-21", ]
d_spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
d_fall2022  <- data[data$date >= "2022-08-29",]
sum(fall2020$count)
sum(spring2021$count)
sum(fall2021$count)
sum(spring2022$count)
sum(fall2022$count)
#devon sums with new adjusted semesters -- USE THIS FOR TOTAL SEM COUNT
sum(d_fall2020$count)
sum(d_spring2021$count)
sum(d_fall2021$count)
sum(d_spring2022$count)
sum(d_fall2022$count)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(dplyr)
library(writexl)
library(ggplot2)
library(janitor)
library(readxl)
data <- read_csv('data930.csv')
colnames(data) <- c('drop','type','role','date','count')
data <-
data%>%
drop_na(drop)
data <- subset(data, select = -c(drop))
#clean date
data$date <- as.Date(parse_date_time(data$date, "dmy"))
data$year <- as.numeric(format(data$date, "%Y"))
ggplot(data=data, aes(x=date, y=count, group=1)) +
geom_line()+
geom_point()
#create dfs by semester
fall2020 <- data[data$date >= "2020-08-30" & data$date <= "2020-12-22", ]
spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-22", ]
spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
fall2022  <- data[data$date >= "2022-08-29",]
#devon semesters - adjust start date for fall 2020, end date for fall 2021 -- USE THIS FOR TOTAL SEM COUNT
d_fall2020 <- data[data$date >= "2020-08-31" & data$date <= "2020-12-22", ]
d_spring2021 <- data[data$date >= "2021-01-25" & data$date <= "2021-05-19", ]
d_fall2021 <- data[data$date >= "2021-08-30" & data$date <= "2021-12-21", ]
d_spring2022  <- data[data$date >= "2022-01-24" & data$date <= "2022-05-18", ]
d_fall2022  <- data[data$date >= "2022-08-29",]
sum(fall2020$count)
sum(spring2021$count)
sum(fall2021$count)
sum(spring2022$count)
sum(fall2022$count)
#devon sums with new adjusted semesters -- USE THIS FOR TOTAL SEM COUNT
sum(d_fall2020$count)
sum(d_spring2021$count)
sum(d_fall2021$count)
sum(d_spring2022$count)
sum(d_fall2022$count)
